#!/usr/bin/env perl
# help to manage VirtualLAN user database.
use strict;
use warnings;

use Term::Prompt;
use DBD::SQLite;
use List::Util 'shuffle';
$Term::Prompt::MULTILINE_INDENT = '';

#my $db_path = "/var/virtuallan/shadow.db";
my $dbh = DBI->connect('dbi:SQLite:dbname=/etc/mvpn.db');

sub generate_salt() {
	my @all_characters = ( 'a' .. 'z', 'A' .. 'Z', '0' .. '9' );
	my $salt = join('', ( shuffle @all_characters )[0..15]);
	return '$6$' . $salt . '$';
}

sub create_user() {
	my ($username, $pass0, $pass1);

	# username
	while(1) {
		$username = prompt('e', 'Username:', '', '', '[a-zA-Z0-9_-]{3,16}$');
		my $ref = $dbh->selectall_arrayref(
			"select username from shadow where username = ?", {}, $username);

		last unless @$ref;
		print "Username $username already exists.\n";
	}

	while(1) {
		$pass0 = prompt('p', 'Password:', '', '');
		if($pass0 !~ m/^[a-zA-Z0-9_-]{6,18}$/) {
			print "\nPassword must contain 6-18 numbers and alphas\n";
			next;
		}

		$pass1 = prompt('p', "\nPassword (repeat):", '', '');
		last if($pass0 eq $pass1);
		print "\nPasswords don't match.\n";
	}

	my $hash = crypt( $pass0, generate_salt());
	my $rc = $dbh->do(
		"insert into shadow(username, password) values(?, ?)", {}, $username, $hash);
	print "\nUser $username created.\n\n";
}

sub remove_user() {
	my $username = prompt('e', 'Username:', '', '', '[a-zA-Z0-9_-]{3,16}$');
	my $confirm = prompt('y', 'Are you sure?', '', 'y');
	if($confirm) {
		my $rc = $dbh->do(
			'delete from shadow where username = ?', {}, $username);
		if($rc == "0E0" ) { # 0 rows affected but no error.
			print "User $username doesn't exist.\n\n";
		}
		else {
			print "User $username deleted.\n\n";
		}
	}
}

sub change_password() {
	my $username = prompt('e', 'Username:', '', '', '[a-zA-Z0-9_-]{3,16}$');

	# user exists ?
	my $ref = $dbh->selectall_arrayref(
		"select username from shadow where username = ?", {}, $username);
	if(! @$ref) {
		print "User $username doesn't exist.\n\n";
		return;
	}

	my ($pass0, $pass1);
	while(1) {
		$pass0 = prompt('p', 'Password:', '', '');
		if($pass0 !~ m/^[a-zA-Z0-9_-]{6,18}$/) {
			print "\nPassword must contain 6-18 numbers and alphas\n";
			next;
		}

		$pass1 = prompt('p', "\nPassword (repeat):", '', '');
		last if($pass0 eq $pass1);
		print "\nPasswords don't match.\n";
	}

	my $hash = crypt( $pass0, generate_salt());
	my $rc = $dbh->do(
		"update shadow set password = ? where username = ?", {}, $hash, $username);
	print "\nPassword for $username updated.\n\n";
}

sub query_user() {
	#my $pattern = prompt('x', 'Pattern:', '% for all', '');
	my $pattern = prompt('e', 'Pattern:', '% for all', '', '%?[a-zA-Z0-9_-]{0,18}%?$');
	$pattern .= "%" unless $pattern =~ m/%$/;

	my $ref = $dbh->selectall_arrayref(
		"select username from shadow where username like \"$pattern\" order by username");
	foreach my $row_ref(@$ref) {
		print $row_ref->[0] . "\n";
	}

	print "\n";
}

my @menu = ( 'Create user', 'Remove user', 'Change password', 'Query user', 'Quit' );
while(1) {

	my $choice = prompt('m',
		{
			prompt => 'Your choice:',
			title  => 'VirtualLAN user database management',
			items  => \@menu,
			order  => 'down',
			cols  => 1,
			display_base => 1,
			return_base  => 0,
			accept_multiple_selections => 0,
			accept_empty_selection     => 0,
		},
		'',
		'1');

	if($choice == 0) {
		# ceate user.
		create_user();
	}
	elsif($choice == 1) {
		remove_user();
	}
	elsif($choice == 2) {
		change_password();
	}
	elsif($choice == 3) {
		query_user();
	}
	else {
		last;
	}
}
